title: Testing Fundamentals
description:
  Let's build our own testing framework, assertion librarie, and mocking library
  to learn how they work.
meta:
  keywords:
    - testing
    - javascript
categories:
  - testing
convertKitTag: '879023'
problemStatements:
  part1: Completely new to testing?
  part2:
    Or have you been testing without really understanding what you're doing?
  part3:
    Most of us skip over the fundamentals when we're just trying to get
    something done. Unfortunately, this strategy leaves us less capable to
    utilize the tools we're using and we end up "holding it wrong." This leads
    to slow/flakey tests that give us less confidence (or none at all)!
  part4:
    Building your own version of these testing tools can significantly increase
    you're understanding of what the tool does and why certain aspects of the
    tool are the way they are. Whether you're brand new to testing, or a
    seasoned veteran, you'll learn a ton by building your own testing framework,
    assertion library, and mocking tool.
keyTakeaways:
  - title: Have a solid grip on testing frameworks
    description:
      Testing frameworks are actually quite simple in concept, but they've all
      been worked on for so long and have so many features it's hard to know
      what they really do and how to use them effectively. When we're done here,
      that won't be a problem for you.
  - title: Understand assertions
    description:
      Assertions are a critical part of every test (without an assertion, how do
      you make sure the thing you're testing is doing what it should?). When
      we're done, you should feel comfortable with existing assertion libraries
      because you'll have written your own.
  - title: Use Mocking effectively
    description: >-
      To make automated testing practical, we need to make a fake version of
      some of our code (I don't want to _actually_ charge my credit card... do
      you?). But mocking can be really confusing, so when we're done with
      building our own version of it, you'll have a solid understanding of how
      it works and how to use it effectively.
topics:
  - Make the simplest form of a test module and run it with node without any
    libraries
  - Simplify our test with our own assertion library
  - Isolate tests with our own testing framework
  - Support async tests
  - Why and when should you mock JavaScript modules and functions?
  - Use monkey-patch mocking
  - Make assertions to ensure you're calling the mocked functions correctly
  - Mock an entire module
prerequisite: >-
  You should have experience with [these JavaScript
  features](/blog/javascript-to-know-for-react). Most of my workshops use
  TypeScript, but this one is in JavaScript to streamline the foundational
  learning process.

# ---
# ---

# ### Get a solid understanding of automated testing

# Do you know what a testing framework does? Do you know what makes a testing
# framework different from a testing or assertion library? Do you know how and
# when to create mock versions of JavaScript modules? The best way to use a tool
# effectively is to understand how it works. And the best way to understand how a
# tool works is by making it yourself!

# In this workshop, we'll learn how testing frameworks, assertion libraries, and
# mocking libraries work by building our own, simple version of each.
