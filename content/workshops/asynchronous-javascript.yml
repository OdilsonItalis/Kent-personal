title: Asynchronous JavaScript
description:
  'In this workshop, we’ll take a deep dive into the two most commonly used
  asynchronous patterns: The Promises API and async/await syntax. We’ll see how
  these two relate to one another and you’ll leave with a strong understanding
  of how async code works in JavaScript with these patterns.'
meta:
  keywords:
    - javascript
    - react
categories:
  - javascript
convertKitTag: '896443'
problemStatements:
  part1: TODO
  part2: TODO
  part3: TODO
  part4: TODO

keyTakeaways:
  - title: TODO
    description: Write asynchronous functions with async/await
  - title: TODO
    description: Create promises to resolve JSON objects
  - title: TODO
    description: See how these two patterns relate to one another
  - title: TODO
    description:
      have a strong understanding of how async code works in JavaScript with
      these patterns
  - title: TODO
    description: Write more readable, easy-to-follow async code
topics:
  - Understanding JavaScript’s Event Loop
  - Callbacks
  - Promises (very deep dive)
  - Async/await

prerequisite: >-
  Attend my [Modern JavaScript Workshop](/workshops/modern-javascript) or have
  the equivalent experience with modern JavaScript APIs and Syntax.

testimonials:
  - imageUrl: https://randomuser.me/api/portraits/lego/1.jpg
    imageAlt: profile photo of person
    author: Person 1
    company: Freelance Figurine
    testimonial:
      Mauris auctor nulla at felis placerat, ut elementum urna commodo. Aenean
      et rutrum quam. Etiam odio massa.
# ### Get up to speed with JavaScript’s built-in APIs and syntax for asynchronous programming

# One of JavaScript’s strengths is what’s called the “event loop.” This one
# language architectural element forms a lot about how you program and interact
# with JavaScript in your day-to-day. In recent years, JavaScript has made leaps
# and bounds in the built-in standard library and syntax to allow for better
# asynchronous patterns.

# ## Two commonly used patterns are:

# <ul>
#   <li>
#     The Promises API, which represents the eventual completion of an operation.
#   </li>
#   <li>
#     Async/await syntax, which pauses the execution of a function until that
#     promise is settled.
#   </li>
# </ul>

# Together, these two patterns allow you to create asynchronous code that is easy
# to follow, readable, and behaves more or less like synchronous code.

# Hi, I'm Kent C. Dodds and in my latest workshop, we’ll take a deep dive into
# Promises and async/await to improve your asynchronous programming.

# ## When you're done you will:

# ## Topics

# ## Pre-requisites

