title: Testing Node.js Applications
description:
  Increase your Node.js deployment confidence with unit and integration tests.
meta:
  keywords:
    - node
    - node.js
    - testing
    - workshop
categories:
  - testing
convertKitTag: '938289'
problemStatements:
  part1: Hey, nice backend you've poured countless hours into
  part2: Would be a shame if something were to ... break!
  part3:
    You've got a fancy UI that allows users to look at their data and make nice
    mutations all with beautiful and completely accessible animations. But if
    you're backend isn't working, no amount of fanciness in the UI is going to
    shield your users from the huge feelings of frustration (and there may even
    be some... profanity ðŸ˜±).
  part4:
    Save your users the pain and frustration by ensuring your backend can show
    up for your fancy UI. You probably don't want to just hit every endpoint
    manually before shipping. Make the computer do it. They're better at it
    anyway. This is easy to get wrong though. That's where this workshop comes
    in.
keyTakeaways:
  - title: Write unit tests
    description:
      When writing Node.js backends, you typically find yourself the proud
      parent of a lot of utility functions, controllers, and middleware. These
      creations of yours need to be tested. They can often be covered by
      integration tests, but sometimes there are enough edge cases in them that
      they require their own isolated unit tests and after this workshop you'll
      know how to do that.
  - title: Write integration tests regardless of your HTTP framework
    description:
      Most of our tests should be integration focused. When we're talking about
      Node.js backends, we're normally exposing HTTP endpoints that other
      developers will hit. This is our public API and we can get most of our
      confidence by hitting those in our tests. When we're through here, you'll
      know how to do this effectively.
  - title: Mock third party dependencies
    description:
      We gotta mock things out sometimes (unless you really do want to order two
      hundred of your company's plush Koalas when testing the checkout flow). In
      this workshop we'll learn how to effectively mock things out and how to
      keep as much confidence as possible while doing so.
  - title: Ship with confidence
    description:
      When we're done here, you'll know what you need to do to set your own
      project up for automated testing so you can deploy your application with
      confidence.
topics:
  - Write unit tests for pure functions
  - Write unit tests for "Controller" modules
  - Write unit tests for Express.js middleware
  - Write integration for API routes
  - Mocking third party dependencies
  - Testing authenticated code
prerequisite: >-
  You should have experience with [these JavaScript
  features](/blog/javascript-to-know-for-react). This workshop will use
  TypeScript, but should be completable if you do not have experience with
  TypeScript.
