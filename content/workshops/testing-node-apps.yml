title: Testing Node.js Applications
description:
  In this workshop, we'll cover common cases you'll come across when testing a
  production Node.js application which uses frameworks like Express.js, Nest.js,
  Koa.js, Hapi.js and more. By the end of this, you'll know what you need to do
  to increase your deployment confidence by adding unit and integration tests
  your Node.js-based backends.
meta:
  keywords:
    - node
    - node.js
    - testing
categories:
  - testing
convertKitTag: '938289'
problemStatements:
  part1: TODO
  part2: TODO
  part3: TODO
  part4: TODO
keyTakeaways:
  - title: TODO
    description: TODO
  - title: TODO
    description: TODO
  - title: TODO
    description: TODO
  - title: TODO
    description: TODO
topics:
  - Write unit tests for pure functions
  - Write unit tests for "Controller" modules
  - Write unit tests for Express.js middleware
  - Write integration for API routes
  - Mocking third party dependencies
  - Testing authenticated code
prerequisite: >-
  You should have experience with [these JavaScript
  features](/blog/javascript-to-know-for-react). This workshop will use
  TypeScript, but should be completable if you do not have experience with
  TypeScript.

# ---
# ---

# ### Increase your confidence in deploying Node.js-based backends

# Backends hold so much of our application's business logic that is often used to
# support multiple clients (web, mobile, and other native platforms). This logic
# is critical to get right and deploying a breaking change to this can be
# devastating to your company's goals (not to mention the bottom-line). Increasing
# your "deployment confidence" is crucial and automated testing is the best way to
# do that.

# As Node.js continues to grow in usage around the world, learning how to test
# this mission-critical code in a way that increases developer velocity as well as
# confidence becomes increasingly important. In this workshop we use an Express.js
# example and focus on the patterns and practices that you need to learn so you
# can apply what you learn to test your code written in any Node.js web framework.

# ## Topics

# ## Pre-requisities

