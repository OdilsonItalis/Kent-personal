title: Advanced React Hooks
description: >-
  In this workshop, we'll look at some of the more advanced hooks and ways they
  can be used to optimize your components and custom hooks. We'll also look at
  several patterns you can follow to make custom hooks that provide great APIs
  for developers to be productive building applications.
meta:
  keywords:
    - react
    - react hooks
categories:
  - react
convertKitTag: '896448'
problemStatements:
  part1: Most apps need more than `useState`, `useEffect`, and `useRef`.
  part2:
    You have more complex state management requirements and larger component
    trees.
  part3:
    Some of the UI libraries you need to use need to make DOM changes. If you
    don't interact with them properly, you could get some layout shift.
  part4:
    When building custom hooks and components, you want to make your APIs as
    user friendly as possible, which can be tricky business.
keyTakeaways:
  - title: Manage Component State Maintainably
    description: >-
      `useState` and `useReducer` are two ways of doing very similar things. In
      this workshop you'll learn what you need to know to choose the best tool
      for the job.
  - title: Utilize React Memoization
    description: >-
      `useCallback` and `useMemo` are powertools that can be tricky if you don't
      understand and use them properly. When we're done, you know when to reach
      for them, and when to leave them alone.
  - title: Share state across the application
    description: >-
      `useContext` is the mechanism React gives us to implicitly share state
      between components without having to pass props. In addition to knowing
      when to use it, you'll also know when *not* to.
  - title: Understand how to integrate 3rd party libraries
    description:
      If you mutate the DOM (or a library you're using does) in a `useEffect`,
      your users will experience a flash of the pre-mutated state which is not a
      great experience. So you'll know how to easily side-step that issue with
      `useLayoutEffect`.
topics:
  - Comparing `useReducer` to `useState` with both simple and complex examples
  - Building custom hooks with `useCallback`
  - Use `useContext` to manage simple and complex state values (like a data
    cache).
  - Use `useLayoutEffect` to update the scroll position of a list of messages
  - Add an imperative API to your component using refs with
    `useImperativeHandle` (and talk about how rarely this hook should be used).
  - Create custom hooks and give users a nice DevTools experience with
    `useDebugValue`.

prerequisite: >-
  Attend my [React Hooks Workshop](/workshops/react-hooks) or have the
  equivalent basic experience of using hooks. You should be experienced with
  `useState`, `useEffect`, and `useRef`.
