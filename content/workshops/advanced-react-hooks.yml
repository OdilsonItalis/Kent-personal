title: Advanced React Hooks
description:
  In this workshop, we'll look at some of the more advanced hooks and ways they
  can be used to optimize your components and custom hooks. We'll also look at
  several patterns you can follow to make custom hooks that provide great APIs
  for developers to be productive building applications.
meta:
  keywords:
    - react
    - react hooks
categories:
  - react
convertKitTag: '896448'
problemStatements:
  part1: TODO
  part2: TODO
  part3: TODO
  part4: TODO
keyTakeaways:
  - title: TODO
    description: TODO
  - title: TODO
    description: TODO
  - title: TODO
    description: TODO
  - title: TODO
    description: TODO
topics:
  - Use `useReducer` to manage state and avoid stale state bugs (and learn when
    it's preferable over `useState`)
  - Optimize expensive operations with `useCallback`
  - Interact with third party DOM libraries with `useLayoutEffect`
  - Learn when to use (and when not to use) `useImperativeHandle` and
    `useDebugValue`
  - Create custom hooks for complex use cases

prerequisite: >-
  Attend my [React Hooks Workshop](/workshops/react-hooks) or have the
  equivalent basic experience of using hooks. You should be experienced with
  `useState`, `useEffect`, and `useRef`.

# ### To learn the more advanced React hooks and different patterns to enable great developer APIs for custom hooks.

# React's basic built-in hooks are phenomenally good and there are several more
# advanced hooks that provide us with terrific opportunities for optimization. The
# hooks feature itself also opens up a world of new possibilities to simplify
# application code through the use of highly optimized and useful custom hooks.

# In this workshop, we'll look at some of the more advanced hooks and ways they
# can be used to optimize your components and custom hooks. We'll also look at
# several patterns you can follow to make custom hooks that provide great APIs for
# developers to be productive building applications.
